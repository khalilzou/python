完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：
  >>> a = abs # 变量a指向abs函数
  >>> a(-1) # 所以也可以通过a调用abs函数
input()函数得到的结果是字符串
定义函数：使用def语句，依次写出函数名、括号、括号中的参数和冒号:
函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕
空函数：
def nop():可以用pass语句。pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。如果没有会报错
  pass
函数可以同时返回多个值，但其实就是一个tuple。
默认参数：def power(x, n=2)，这样调用函数的时候，如果n=2，就可以不用传入n值。
  一是必选参数在前，默认参数在后
  当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。（即，经常变化的参数和不经常变化的参数）
  当不按顺序提供部分默认参数时，需要把参数名写上。如：enroll('Adam', 'M', city='Tianjin')
  定义默认参数要牢记一点：默认参数必须指向不变对象！因为默认参数也是一个变量，它指向对象，每次调用该函数，如果改变了参数的内容，则下次调用时，默认参数的内容就是改变后的内容
可变参数：
  定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。可变参数允许你传入0个或任意个参数
关键字参数：
  def person(name, age, **kw):允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict
命名关键字参数
  如果要限制关键字参数的名字，就可以用命名关键字参数
  如，只接收city和job作为关键字参数：def person(name, age, *, city, job):
  如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：def person(name, age, *args, city, job):
  命名关键字参数必须传入参数名，否则会被默认为位置参数：person('Jack', 24, job='Engineer')
⚠️使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。如果缺少*，Python解释器将无法识别位置参数和命名关键字参数
参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
调用函数时如何传入可变参数和关键字参数的语法：既可以直接传入，又可以先组装list或tuple或dict
